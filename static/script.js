import {CodeJar} from './codejar/codejar.js'
const editor = document.querySelector('#editor')
globalThis.editor_content = 'function foo() {\n\treturn "Hi"\n}'

const highlight = editor => {
    editor.innerHTML = hljs.highlight(editor.textContent, { language: 'javascript' }).value
}

const jar = CodeJar(editor, highlight, {
    tab: '  ',
})

jar.updateCode(globalThis.editor_content)
jar.onUpdate(code => { globalThis.editor_content = code })
//jar.updateCode(localStorage.getItem('code'))
//jar.onUpdate(code => { localStorage.setItem('code', code) })



//console.log(get_default_content())

//function get_default_content() {
//    // {{{
//    return `
//// :client-server-architecture: blob:http://localhost:42069/d4deb6f7-124f-4efe-ba74-9968870ab851
//// :dfd: blob:http://localhost:42069/2c07074f-9287-467e-b063-b963073120c5
//// :elm-architecture: blob:http://localhost:42069/73c43758-506c-45c8-b4f4-020941e66ae9
//// :sequence: blob:http://localhost:42069/c1c8949f-e689-466d-b14f-e51f0075809b
//// :website: blob:http://localhost:42069/560c829b-02c6-4046-85cc-7314a643396f
//
//
//#@ РЕФЕРАТ
//
//Отчёт 15 страниц, 5 рисунков, 15 источников
//
//ИНТЕРНЕТ, РАЗРАБОТКА, ВЕБ-ТЕХНОЛОГИИ, ASCIIDOC, GLEAM, ACE, SVG, PDF
//
//Объект исследования – веб-приложение для редактирования и конвертации документов формата Asciidoc.
//
//Предмет исследования – процесс разработки, создания и функционирования веб-приложения для работы с Asciidoc.
//
//Цель работы – разработка архитектуры и прототипа веб-приложения, позволяющего редактировать документы в формате Asciidoc и конвертировать их в SVG и PDF с соблюдением ГОСТ.
//
//В ходе работы был проведён анализ существующих форматов разметки и инструментов для работы с ними. Рассмотрен процесс создания веб-приложения, включая выбор архитектуры, используемого программного обеспечения и инструментов разработки.
//
//Результатом работы является прототип веб-приложения, который обеспечивает удобное редактирование и просмотр документов в реальном времени, а также экспорт в форматы SVG и PDF. Приложение демонстрирует высокую производительность и удобство использования, что позволяет ему конкурировать с существующими инструментами для работы с документами в сети интернет.
//
//
//
//// Содержание
//#%
//
//
//
//
//#@ ВВЕДЕНИЕ
//
//В данной курсовой работе рассматривается разработка и анализ архитектуры веб-приложения для редактирования и конвертации документов в формате Asciidoc. Целью данного приложения является упрощение работы с технической документацией и отчётами, автоматизируя процесс преобразования документов в форматы SVG и PDF с соблюдением стандартов ГОСТ.
//
//Актуальность выбранной темы обусловлена растущей популярностью форматов разметки для создания структурированных текстов и недостатком удобных инструментов для работы с Asciidoc, особенно в контексте применения национальных стандартов. Существующие решения либо слишком сложны в использовании, либо не предоставляют необходимых функций для быстрой и качественной конвертации.
//
//Целью данной курсовой работы является разработка архитектуры и прототипа веб-приложения, предоставляющего удобный интерфейс для работы с Asciidoc и позволяющего экспортировать документы в популярные форматы с сохранением всех структурных элементов.
//
//Для достижения цели были поставлены следующие задачи:
//
//- изучить формат Asciidoc и его применение в современных рабочих процессах;
//- провести анализ существующих инструментов для работы с Asciidoc и определить их преимущества и недостатки;
//- разработать архитектуру приложения, включающую клиентскую и серверную части;
//- спроектировать потоки данных для обработки документов и экспорта их в SVG и PDF;
//- выбрать и обосновать используемые технологии, такие как Gleam для серверной части, Ace Editor для клиентского редактора, а также инструменты для конвертации форматов;
//- реализовать минимальный жизнеспособный прототип приложения с базовым функционалом, включая редактирование текста, предварительный просмотр и экспорт;
//- провести тестирование производительности, удобства использования и соответствия заявленным требованиям.
//
//
//
//
//
//# Описание предметной области
//
//## Анализ формата Asciidoc
//
//Формат Asciidoc[1] представляет собой мощный текстовый формат разметки, который применяется для создания технической документации, статей, презентаций и других типов текстовых документов. Его основным преимуществом является поддержка сложных структур, таких как таблицы, списки, врезки и изображения, что делает его более функциональным по сравнению с Markdown[2].
//
//Преимущества Asciidoc:
//
//- Гибкость и возможность расширения;
//- Поддержка различных форматов экспорта (HTML, PDF, DocBook и др.);
//- Простой и читабельный синтаксис.
//
//## Обоснование выбора Asciidoc
//
//На основании анализа существующих решений, было принято решение использовать Asciidoc в качестве основного формата для приложения. Среди альтернатив рассматривались LaTeX[3] и Markdown, однако:
//
//- LaTeX сложен в освоении и требует установки специфического программного обеспечения;
//- Markdown обладает более ограниченным функциональном чем Asciidoc, что делает его неподходящим для создания сложных документов.
//
//## Функциональные требования к системе
//
//Для реализации веб-приложения, соответствующего заявленной задаче, необходимо обеспечить следующие функциональные возможности:
//
//- Редактирование текста в формате Asciidoc: Пользователь должен иметь возможность вводить и редактировать текст через встроенный текстовый редактор с подсветкой синтаксиса. Для этого используется Ace[4], предоставляющий удобный интерфейс для работы с текстом;
//
//- Просмотр результатов в реальном времени: Результат редактирования отображается пользователю в формате SVG. Это позволяет мгновенно увидеть изменения в документе без необходимости экспорта;
//
//- Пользователю предоставляется возможность сохранить документ в форматах SVG[5] и PDF. Экспорт должен соответствовать стандартам ГОСТ;
//
//- Минимизация запросов к серверу: Для повышения скорости работы клиентская часть обрабатывает базовые операции самостоятельно, включая предварительный просмотр. Сервер обрабатывает только первичный запрос страницы и экспорт в PDF.
//
//## Нефункциональные требования к системе
//
//Помимо основных функциональных возможностей, приложение должно соответствовать следующим нефункциональным требованиям:
//
//- Производительность: Время обработки текста (например, преобразования в SVG или PDF) не должно превышать 3 секунд для документов среднего объёма (10-20 страниц);
//
//- Удобство интерфейса: Интерфейс должен быть интуитивно понятным, с минималистичным дизайном, адаптированным для работы как на настольных компьютерах, так и на мобильных устройствах;
//
//- Кроссплатформенность: Приложение должно работать в большинстве современных браузеров (Google Chrome, Firefox, Safari, Edge);
//
//- Масштабируемость: Код должен быть организован таким образом, чтобы можно было легко добавлять новые функции в будущем (например, поддержку дополнительных форматов);
//
//- Соответствие стандартам безопасности: Все данные, передаваемые между клиентом и сервером, должны быть защищены через HTTPS. Сервер не должен хранить личные данные пользователей в первой версии приложения.
//
//## Ограничения системы
//
//Проект находится на стадии прототипа и имеет несколько ограничений, которые необходимо учитывать при разработке:
//
//- Использование Gleam[6]: Серверная часть написана на языке Gleam, что ограничивает доступ к некоторым библиотекам и может усложнить интеграцию с другими технологиями;
//
//- Формат входных данных: Приложение поддерживает исключительно формат Asciidoc, что накладывает ограничения на вводимый текст;
//
//- Отсутствие системы хранения данных: На данном этапе проект не предоставляет возможности сохранять файлы на сервере или хранить их историю. Пользователь должен управлять файлами самостоятельно;
//
//- Ограниченная производительность: Приложение оптимизировано для работы с документами малого и среднего размера. Обработка больших документов (более 100 страниц) может занимать больше времени;
//
//- Нет поддержки совместного редактирования: На текущем этапе система не поддерживает работу нескольких пользователей над одним документом в реальном времени;
//
//Эти ограничения планируется устранить в следующих версиях приложения, по мере его развития и получения обратной связи от пользователей.
//
//
//
//
//# Проектирование архитектуры
//
//## Выбранная архитектура
//
//Архитектура приложения представляет собой модель клиент-сервер. Клиентская часть реализована в формате SPA (Single Page Application) и предоставляет пользователю интерфейс для редактирования и просмотра документов, а также конвертирует Asciidoc в SVG. Серверная часть обрабатывает данные и выполняет конвертацию SVG в PDF.
//
//![Клиент-серверная архитектура,40](client-server-architecture)
//
//### Составляющие архитектуры
//
//- Клиентская часть: Реализована с использованием Ace Editor, который обеспечивает удобное редактирование текста с подсветкой синтаксиса;
//- Серверная часть: Выполняет обработку данных, преобразование форматов и возвращает результаты клиенту;
//- Хранилище данных: На этапе минимально жизнеспособного приложения (MVP) постоянное хранилище данных отсутствует, однако в будущем будет использоваться SQLite[7].
//
//## Будущие улучшения
//
//Планируется переход к архитектуре языка Elm[8] (The Elm Architecture), которая обеспечит более эффективное управление состоянием приложения:
//
//![Архитектура TEA,50](elm-architecture)
//
//
//
//# Реализация MVP
//
//## Основные функции
//
//MVP (минимальный жизнеспособный продукт) включает следующие ключевые функции:
//
//- Редактирование документов в формате Asciidoc;
//- Просмотр результата в реальном времени;
//- Экспорт документа в форматах SVG и PDF.
//
//Для реализации этих функций используется комбинация технологий:
//
//- Ace Editor в качестве текстового редактора;
//- JavaScript для конвертации текста Asciidoc в формат SVG, который отображается в браузере;
//- Gleam для серверной логики, которая включает выдачу статических файлов и преобразование SVG в PDF;
//- GNU awk[9] для разбиения всех страниц SVG в отдельные файлы;
//- svg2pdf[10] для преобразования SVG в PDF, но есть поддержка только одной страницы из одной SVG;
//- GhostScript[11] для совмещения всех полученный страниц в одну PDF.
//
//Документация по Веб-технологиям была взята с сайта MDN[12].
//
//## Инфраструктура
//
//Для развёртывания приложения используется домашний сервер под управлением операционной системы Void Linux[13]. Выбор данной системы обусловлен её минимализмом, высокой производительностью и простотой настройки, что делает её подходящей для хостинга приложений.
//
//Приложение работает локально, а доступ к серверу обеспечивается с помощью сервиса Ngrok[14]. Ngrok выполняет соединение локального порта со своим сервером, предоставляя статический публичный URL для подключения к локальному серверу через интернет.
//
//Основные компоненты инфраструктуры включают:
//
//- Void Linux: базовая операционная система для запуска серверной части;
//- Ngrok: инструмент для проброса локальных портов в интернет;
//- Браузер: клиентская часть запускается локально или через публичный URL, предоставленный Ngrok.
//
//Преимущества такой инфраструктуры:
//
//- Точность настройки: Void Linux позволяет развернуть минимальную конфигурацию для хостинга приложения с полным контролем над ресурсами и сервисами;
//- Локальная изоляция: работа сервера на домашнем компьютере обеспечивает полный контроль над системой;
//- Удобство доступа: Ngrok устраняет необходимость в сложной настройке роутера или DNS.
//
//
//## Иллюстрация последовательности действий
//
//На рисунке 3.1 представлена диаграмма последовательности, отображающая процесс взаимодействия пользователя с системой:
//
//![Диаграмма Последовательности,100](sequence)
//
//# Потоки данных (DFD)
//
//## Описание потоков данных
//
//Работа приложения включает два ключевых потока:
//- Конвертация Asciidoc в SVG в и возврат результата клиенту для отображения.
//- Конвертация Asciidoc в SVG в PDF и отправка готового файла клиенту.
//
//## Иллюстрация потоков данных
//
//Для визуализации потока данных была создана DFD, отображающая входные данные, процессы обработки и выходные результаты:
//
//![Диаграмма Потока Данных,100](dfd)
//
//
//
//# Тестирование
//
//## Тестирование UX/UI
//
//Тестирование пользовательского интерфейса проводилось для проверки удобства взаимодействия. Ниже представлено представление вебсайта приложения:
//
//![Скриншот работы сайта,100](website)
//
//## Проверка функциональности
//
//Были протестированы основные операции:
//- Конвертация Asciidoc в SVG.
//- Конвертация SVG в PDF.
//- Соответствие выходного формата стандартам ГОСТ.
//
//## Результаты тестирования
//
//Для наглядности можно включить таблицу или диаграмму, отображающую ключевые метрики:
//- Время обработки запроса.
//- Корректность отображения элементов.
//- Отсутствие ошибок при экспорте.
//
//#@ Заключение
//
//Созданное приложение демонстрирует возможность удобной работы с документами формата Asciidoc. Архитектура приложения обеспечивает лёгкое масштабирование и возможность дальнейшего расширения. Основной акцент сделан на простоте использования, производительности и соответствии стандартам ГОСТ.
//
//Исходный код хранится локально и в сервисе Github[15].
//
//В будущем планируется:
//- Внедрение системы пользовательских аккаунтов.
//- Поддержка дополнительных форматов.
//- Оптимизация производительности.
//
//#@ СПИСОК ИСТОЧНИКОВ И ЛИТЕРАТУРЫ
//
//1. Asciidoc [Электронный ресурс]. – URL: https://asciidoc.org/ (дата обращения 09.12.2024).
//1. MarkDown [Электронный ресурс]. – URL: https://www.markdownguide.org/ (дата обращения 09.12.2024).
//1. LaTeX [Электронный ресурс]. – URL: https://www.latex-project.org/ (дата обращения 09.12.2024).
//1. Ace Editor [Электронный ресурс]. – URL: https://ace.c9.io/ (дата обращения 09.12.2024).
//1. SVG [Электронный ресурс]. – URL: https://www.w3.org/Graphics/SVG/ (дата обращения 09.12.2024).
//1. Gleam [Электронный ресурс]. – URL: https://gleam.run/ (дата обращения 09.12.2024).
//1. SQLite [Электронный ресурс]. – URL: https://www.sqlite.org/index.html (дата обращения 09.12.2024).
//1. Elm [Электронный ресурс]. – URL: https://elm-lang.org/ (дата обращения 09.12.2024).
//1. GNU awk [Электронный ресурс]. – URL: https://www.gnu.org/software/gawk/manual/gawk.html (дата обращения 09.12.2024).
//1. svg2pdf [Электронный ресурс]. – URL: https://github.com/typst/svg2pdf (дата обращения 09.12.2024).
//1. GhostScript [Электронный ресурс]. – URL: https://www.ghostscript.com/ (дата обращения 09.12.2024).
//1. MDN Документация по Веб-технологиям [Электронный ресурс]. – URL: https://developer.mozilla.org/en-US/ (дата обращения 09.12.2024).
//1. Void Linux [Электронный ресурс]. – URL: https://voidlinux.org/ (дата обращения 09.12.2024).
//1. Ngrok [Электронный ресурс]. – URL: https://ngrok.com/docs (дата обращения 09.12.2024).
//1. Github [Электронный ресурс]. – URL: https://github.com/ (дата обращения 09.12.2024).
//`
//    // }}}
//}
